export interface SimpleTestConfig {
  promptId: string;
  version: string;
  variables: Record<string, string>;
  testParameters: {
    model?: string;
    temperature?: number;
    maxTokens?: number;
  };
}

export interface BasicAssertion {
  type: 'contains' | 'not-contains' | 'not-empty' | 'valid-json' | 'javascript';
  value?: string;
  threshold?: number;
}

export function generatePromptFooYAML(config: SimpleTestConfig): string {
  const { promptId, version, variables, testParameters } = config;
  
  const model = testParameters.model || 'gpt-4';
  const temperature = testParameters.temperature ?? 0.7;
  const maxTokens = testParameters.maxTokens || 2000;

  const providerConfig = JSON.stringify({
    temperature,
    max_tokens: maxTokens
  });

  const basicAssertions = generateBasicAssertions();
  
  const variablesYaml = Object.entries(variables)
    .map(([key, value]) => `      ${key}: "${value}"`)
    .join('\n');

  const assertionsYaml = basicAssertions
    .map(assertion => {
      let assertStr = `      - type: ${assertion.type}`;
      if (assertion.value !== undefined) {
        assertStr += `\n        value: "${assertion.value}"`;
      }
      if (assertion.threshold !== undefined) {
        assertStr += `\n        threshold: ${assertion.threshold}`;
      }
      return assertStr;
    })
    .join('\n');

  return `# PromptFoo Test Configuration
# Generated by ModelMind Test Case Generator
# Prompt: ${promptId} (${version})

prompts:
  - "${promptId}"

providers:
  - "openai:${model}:${providerConfig}"

tests:
  - vars:
${variablesYaml}
    assert:
${assertionsYaml}
    description: "Test case for ${promptId} ${version}"

defaultTest:
  vars:
    input: "Create a simple diagram"
  assert:
    - type: not-empty
    - type: contains
      value: "PlantUML"
`;
}

export function generateBasicAssertions(): BasicAssertion[] {
  return [
    {
      type: 'not-empty'
    },
    {
      type: 'contains',
      value: '@startuml'
    },
    {
      type: 'contains',
      value: '@enduml'
    },
    {
      type: 'javascript',
      value: 'output.length > 50'
    }
  ];
}

export function generateCustomAssertions(customRules?: string[]): BasicAssertion[] {
  const basic = generateBasicAssertions();
  
  if (!customRules || customRules.length === 0) {
    return basic;
  }

  const custom: BasicAssertion[] = customRules.map(rule => ({
    type: 'contains',
    value: rule
  }));

  return [...basic, ...custom];
}

export function validateYamlStructure(yaml: string): boolean {
  const requiredSections = ['prompts:', 'providers:', 'tests:'];
  return requiredSections.every(section => yaml.includes(section));
}

export function generateMinimalYAML(promptId: string, variables: Record<string, string>): string {
  const variablesYaml = Object.entries(variables)
    .map(([key, value]) => `      ${key}: "${value}"`)
    .join('\n') || '      input: "default test input"';

  return `prompts:
  - "${promptId}"

providers:
  - "openai:gpt-4"

tests:
  - vars:
${variablesYaml}
    assert:
      - type: not-empty
      - type: contains
        value: "PlantUML"
`;
}

export function generateYAMLWithCustomProvider(
  config: SimpleTestConfig,
  providerString: string
): string {
  const { promptId, version, variables } = config;
  
  const variablesYaml = Object.entries(variables)
    .map(([key, value]) => `      ${key}: "${value}"`)
    .join('\n');

  const assertions = generateBasicAssertions();
  const assertionsYaml = assertions
    .map(assertion => {
      let assertStr = `      - type: ${assertion.type}`;
      if (assertion.value !== undefined) {
        assertStr += `\n        value: "${assertion.value}"`;
      }
      return assertStr;
    })
    .join('\n');

  return `# Custom Provider Test Configuration
prompts:
  - "${promptId}"

providers:
  - "${providerString}"

tests:
  - vars:
${variablesYaml}
    assert:
${assertionsYaml}
    description: "Custom test for ${promptId} ${version}"
`;
}

export const simpleConfigGenerator = {
  generate: generatePromptFooYAML,
  generateMinimal: generateMinimalYAML,
  generateWithCustomProvider: generateYAMLWithCustomProvider,
  validate: validateYamlStructure,
  getBasicAssertions: generateBasicAssertions,
  getCustomAssertions: generateCustomAssertions
};