@startuml Repository Pattern
' Description: A template showing the Repository design pattern implementation
' Tags: repository, design pattern, data access

title Repository Pattern

interface "IRepository<T>" {
  +getById(id: string): T
  +getAll(): List<T>
  +add(item: T): void
  +update(item: T): void
  +delete(id: string): void
  +find(predicate: Func<T, bool>): List<T>
}

class "Repository<T>" {
  -context: DbContext
  +Repository(context: DbContext)
  +getById(id: string): T
  +getAll(): List<T>
  +add(item: T): void
  +update(item: T): void
  +delete(id: string): void
  +find(predicate: Func<T, bool>): List<T>
  #saveChanges(): void
}

class "UserRepository" {
  +UserRepository(context: DbContext)
  +getUserByEmail(email: string): User
  +getUsersByRole(role: string): List<User>
  +activateUser(userId: string): void
  +deactivateUser(userId: string): void
}

class "User" {
  -id: string
  -name: string
  -email: string
  -role: string
  -isActive: boolean
  +User(name: string, email: string)
  +activate(): void
  +deactivate(): void
}

class "DbContext" {
  -connection: Connection
  +Users: DbSet<User>
  +SaveChanges(): void
}

IRepository <|.. Repository
Repository <|-- UserRepository
UserRepository --> User
Repository --> DbContext

note bottom of IRepository
  Generic repository interface
  for data access operations
end note

note right of UserRepository
  Specialized repository with
  user-specific operations
end note

@enduml