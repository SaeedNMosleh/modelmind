@startuml Observer Pattern
' Description: Observer design pattern implementation
' Tags: observer, design pattern, behavioral pattern

title Observer Design Pattern

interface "Subject" {
  +registerObserver(observer: Observer): void
  +removeObserver(observer: Observer): void
  +notifyObservers(): void
}

interface "Observer" {
  +update(data: any): void
}

class "WeatherStation" {
  -observers: List<Observer>
  -temperature: float
  -humidity: float
  -pressure: float
  +WeatherStation()
  +registerObserver(observer: Observer): void
  +removeObserver(observer: Observer): void
  +notifyObservers(): void
  +setMeasurements(temperature: float, humidity: float, pressure: float): void
  -measurementsChanged(): void
}

class "CurrentConditionsDisplay" {
  -temperature: float
  -humidity: float
  -weatherStation: Subject
  +CurrentConditionsDisplay(weatherStation: Subject)
  +update(data: any): void
  +display(): void
}

class "StatisticsDisplay" {
  -temperatureReadings: List<float>
  -humidityReadings: List<float>
  -pressureReadings: List<float>
  -weatherStation: Subject
  +StatisticsDisplay(weatherStation: Subject)
  +update(data: any): void
  +display(): void
  -calculateStatistics(): Statistics
}

class "ForecastDisplay" {
  -currentPressure: float
  -lastPressure: float
  -weatherStation: Subject
  +ForecastDisplay(weatherStation: Subject)
  +update(data: any): void
  +display(): void
  -predictWeather(): string
}

Subject <|.. WeatherStation
Observer <|.. CurrentConditionsDisplay
Observer <|.. StatisticsDisplay
Observer <|.. ForecastDisplay
WeatherStation o-- Observer
CurrentConditionsDisplay --> Subject
StatisticsDisplay --> Subject
ForecastDisplay --> Subject

note right of Subject
  Maintains list of observers
  and notifies them of changes
end note

note right of Observer
  Interface implemented by all objects
  that need to be notified of changes
end note

note bottom of WeatherStation
  Concrete subject that holds
  and updates state data
end note

@enduml